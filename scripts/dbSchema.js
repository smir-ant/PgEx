// –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞, music –Ω–∞–ø—Ä–∏–º–µ—Ä
const dbName = document.querySelector('script[data-db]').getAttribute('data-db');


// –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const module = await import(`./db/${dbName}.js`);

export const createDB = module.createDB;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –∏–∑ SQL-–∑–∞–ø—Ä–æ—Å–∞
function parseTableSchema(schemaString) {
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç—ã–º
    const fields = schemaString
        .replace(/\n/g, '') // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        .replace(/[();]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –∏ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
        .split(','); // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º

    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ç–∞–±–ª–∏—Ü—ã
    const parsedFields = [];

    fields.forEach(field => {
        // –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏: –∏–º—è –ø–æ–ª—è –∏ –µ–≥–æ —Ç–∏–ø
        const parts = field.trim().split(/\s+/); // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
        const fieldName = parts[0].toLowerCase(); // –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (–≤—Å—ë —á—Ç–æ –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏)
        let fieldType = parts.slice(1).join(' ');

        // –£–±–∏—Ä–∞–µ–º "NOT NULL" –∏ –¥—Ä—É–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø
        fieldType = fieldType.replace('NOT NULL', '').trim();

        // –ï—Å–ª–∏ –ø–æ–ª–µ —è–≤–ª—è–µ—Ç—Å—è PRIMARY KEY, –∑–∞–º–µ–Ω—è–µ–º —Ç–∏–ø SERIAL –Ω–∞ INT –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á
        if (fieldType.includes('SERIAL PRIMARY KEY')) {
            fieldType = 'üîë INT';
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–ª—è —Å —Ç–∏–ø–æ–º VARCHAR(255), —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫–æ–±–∫–∏
        fieldType = fieldType.replace('VARCHAR255', 'VARCHAR(255)');

        parsedFields.push({
            name: fieldName,
            type: fieldType
        });
    });

    return parsedFields;
}

// –ü–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
const tableName = createDB[0]; // –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
const tableSchema = parseTableSchema(createDB[1]); // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã

// –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (.schema #tableName)
document.getElementById("tableName").innerText = tableName;


// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
const table = document.createElement('table');
table.classList.add('schema_table');

// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
// const headerRow = document.createElement('tr');
// const th = document.createElement('th');
// th.colSpan = 2; // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
// th.innerText = tableName;
// headerRow.appendChild(th);
// table.appendChild(headerRow);

// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ schemaData
tableSchema.forEach(field => {
    const row = document.createElement('tr');

    const fieldCell = document.createElement('td');
    fieldCell.innerText = field.name;

    const typeCell = document.createElement('td');
    typeCell.innerText = field.type;

    row.appendChild(fieldCell);
    row.appendChild(typeCell);

    table.appendChild(row);
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π div –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
// document.getElementById('schema').appendChild(schemaDiv);
// –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç schemaDiv –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
const schemaBlock = document.getElementsByClassName('schema_block');
schemaBlock[0].insertBefore(table, schemaBlock[0].firstChild);