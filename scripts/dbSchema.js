// –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'music')
const dbName = document.querySelector('script[data-db]').getAttribute('data-db');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
const module = await import(`./db/${dbName}.js`);

// –º–∞—Å—Å–∏–≤ —Ç–∞–±–ª–∏—Ü [['–Ω–∞–∑–≤–∞–Ω–∏–µ','—Å–æ–∑–¥–∞–Ω–∏–µ','–Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ'],['–Ω–∞–∑–≤–∞–Ω–∏–µ','—Å–æ–∑–¥–∞–Ω–∏–µ','–Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ'],]
export const createDB = module.createDB;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –∏–∑ SQL-–∑–∞–ø—Ä–æ—Å–∞
function parseTableSchema(schemaString) {
    const fields = schemaString
        .replace(/\n/g, '')  // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        .replace(/[();]/g, '')  // –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –∏ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
        .split(',');  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º

    const parsedFields = [];

    fields.forEach(field => {
        const parts = field.trim().split(/\s+/);  // –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
        const fieldName = parts[0].toLowerCase();  // –ò–º—è –ø–æ–ª—è –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        let fieldType = parts.slice(1).join(' ');  // –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö

        // –û—á–∏—â–∞–µ–º —Ç–∏–ø –æ—Ç –ª–∏—à–Ω–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        fieldType = fieldType.replace('NOT NULL', '').trim();

        // –ï—Å–ª–∏ PRIMARY KEY, –º–µ–Ω—è–µ–º SERIAL –Ω–∞ INT –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á
        if (fieldType.includes('SERIAL PRIMARY KEY')) {
            fieldType = 'üîë INT';
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è VARCHAR(255)
        fieldType = fieldType.replace('VARCHAR255', 'VARCHAR(255)');

        parsedFields.push({
            name: fieldName,
            type: fieldType
        });
    });

    return parsedFields;
}

// –°–µ–∫—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
const schemaSection = document.getElementById('schema');

// –î–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏–∑ createDB —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ (figure)
createDB.forEach(tableData => {
    const tableName = tableData[0];  // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const tableSchema = parseTableSchema(tableData[1]);  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã

    // –°–æ–∑–¥–∞–µ–º figure –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    const figure = document.createElement('figure');
    figure.classList.add('schema_block');

    // –°—Ö–µ–º–∞ –±—É–¥–µ—Ç –≤ table –≤–Ω—É—Ç—Ä–∏ figure
    const table = document.createElement('table');
    table.classList.add('schema_table');

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–ª–µ–π —Ç–∞–±–ª–∏—Ü—ã
    tableSchema.forEach(field => {
        const row = document.createElement('tr');

        const fieldCell = document.createElement('td');
        fieldCell.innerText = field.name;

        const typeCell = document.createElement('td');
        typeCell.innerText = field.type;

        row.appendChild(fieldCell);
        row.appendChild(typeCell);
        table.appendChild(row);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ figure
    figure.appendChild(table);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã (figcaption)
    const figcaption = document.createElement('figcaption');
    figcaption.innerHTML = `<label>–¢–∞–±–ª–∏—Ü–∞ <span class="mono">${tableName}</span></label>`;
    figure.appendChild(figcaption);

    // –î–æ–±–∞–≤–ª—è–µ–º figure –≤ —Å–µ–∫—Ü–∏—é schema
    schemaSection.appendChild(figure);
});
